/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.codebox.shared_dtos.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SubmissionSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1460371341392366287L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SubmissionSchema\",\"namespace\":\"com.codebox.shared_dtos.schema\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"language\",\"type\":\"string\"},{\"name\":\"problemId\",\"type\":\"long\"},{\"name\":\"userId\",\"type\":\"long\"},{\"name\":\"contestId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"submissionTestcases\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SubmissionTestcase\",\"fields\":[{\"name\":\"input\",\"type\":\"string\"},{\"name\":\"output\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"expectedOutput\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"status\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SubmissionSchema> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SubmissionSchema> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SubmissionSchema> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SubmissionSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SubmissionSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SubmissionSchema to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SubmissionSchema from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SubmissionSchema instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SubmissionSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.lang.CharSequence code;
  private java.lang.CharSequence language;
  private long problemId;
  private long userId;
  private java.lang.Long contestId;
  private java.lang.CharSequence status;
  private java.util.List<com.codebox.shared_dtos.schema.SubmissionTestcase> submissionTestcases;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SubmissionSchema() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param code The new value for code
   * @param language The new value for language
   * @param problemId The new value for problemId
   * @param userId The new value for userId
   * @param contestId The new value for contestId
   * @param status The new value for status
   * @param submissionTestcases The new value for submissionTestcases
   */
  public SubmissionSchema(java.lang.CharSequence id, java.lang.CharSequence code, java.lang.CharSequence language, java.lang.Long problemId, java.lang.Long userId, java.lang.Long contestId, java.lang.CharSequence status, java.util.List<com.codebox.shared_dtos.schema.SubmissionTestcase> submissionTestcases) {
    this.id = id;
    this.code = code;
    this.language = language;
    this.problemId = problemId;
    this.userId = userId;
    this.contestId = contestId;
    this.status = status;
    this.submissionTestcases = submissionTestcases;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return code;
    case 2: return language;
    case 3: return problemId;
    case 4: return userId;
    case 5: return contestId;
    case 6: return status;
    case 7: return submissionTestcases;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: code = (java.lang.CharSequence)value$; break;
    case 2: language = (java.lang.CharSequence)value$; break;
    case 3: problemId = (java.lang.Long)value$; break;
    case 4: userId = (java.lang.Long)value$; break;
    case 5: contestId = (java.lang.Long)value$; break;
    case 6: status = (java.lang.CharSequence)value$; break;
    case 7: submissionTestcases = (java.util.List<com.codebox.shared_dtos.schema.SubmissionTestcase>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'language' field.
   * @return The value of the 'language' field.
   */
  public java.lang.CharSequence getLanguage() {
    return language;
  }


  /**
   * Sets the value of the 'language' field.
   * @param value the value to set.
   */
  public void setLanguage(java.lang.CharSequence value) {
    this.language = value;
  }

  /**
   * Gets the value of the 'problemId' field.
   * @return The value of the 'problemId' field.
   */
  public long getProblemId() {
    return problemId;
  }


  /**
   * Sets the value of the 'problemId' field.
   * @param value the value to set.
   */
  public void setProblemId(long value) {
    this.problemId = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public long getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(long value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'contestId' field.
   * @return The value of the 'contestId' field.
   */
  public java.lang.Long getContestId() {
    return contestId;
  }


  /**
   * Sets the value of the 'contestId' field.
   * @param value the value to set.
   */
  public void setContestId(java.lang.Long value) {
    this.contestId = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'submissionTestcases' field.
   * @return The value of the 'submissionTestcases' field.
   */
  public java.util.List<com.codebox.shared_dtos.schema.SubmissionTestcase> getSubmissionTestcases() {
    return submissionTestcases;
  }


  /**
   * Sets the value of the 'submissionTestcases' field.
   * @param value the value to set.
   */
  public void setSubmissionTestcases(java.util.List<com.codebox.shared_dtos.schema.SubmissionTestcase> value) {
    this.submissionTestcases = value;
  }

  /**
   * Creates a new SubmissionSchema RecordBuilder.
   * @return A new SubmissionSchema RecordBuilder
   */
  public static com.codebox.shared_dtos.schema.SubmissionSchema.Builder newBuilder() {
    return new com.codebox.shared_dtos.schema.SubmissionSchema.Builder();
  }

  /**
   * Creates a new SubmissionSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SubmissionSchema RecordBuilder
   */
  public static com.codebox.shared_dtos.schema.SubmissionSchema.Builder newBuilder(com.codebox.shared_dtos.schema.SubmissionSchema.Builder other) {
    if (other == null) {
      return new com.codebox.shared_dtos.schema.SubmissionSchema.Builder();
    } else {
      return new com.codebox.shared_dtos.schema.SubmissionSchema.Builder(other);
    }
  }

  /**
   * Creates a new SubmissionSchema RecordBuilder by copying an existing SubmissionSchema instance.
   * @param other The existing instance to copy.
   * @return A new SubmissionSchema RecordBuilder
   */
  public static com.codebox.shared_dtos.schema.SubmissionSchema.Builder newBuilder(com.codebox.shared_dtos.schema.SubmissionSchema other) {
    if (other == null) {
      return new com.codebox.shared_dtos.schema.SubmissionSchema.Builder();
    } else {
      return new com.codebox.shared_dtos.schema.SubmissionSchema.Builder(other);
    }
  }

  /**
   * RecordBuilder for SubmissionSchema instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SubmissionSchema>
    implements org.apache.avro.data.RecordBuilder<SubmissionSchema> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence code;
    private java.lang.CharSequence language;
    private long problemId;
    private long userId;
    private java.lang.Long contestId;
    private java.lang.CharSequence status;
    private java.util.List<com.codebox.shared_dtos.schema.SubmissionTestcase> submissionTestcases;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.codebox.shared_dtos.schema.SubmissionSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.language)) {
        this.language = data().deepCopy(fields()[2].schema(), other.language);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.problemId)) {
        this.problemId = data().deepCopy(fields()[3].schema(), other.problemId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.userId)) {
        this.userId = data().deepCopy(fields()[4].schema(), other.userId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.contestId)) {
        this.contestId = data().deepCopy(fields()[5].schema(), other.contestId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.submissionTestcases)) {
        this.submissionTestcases = data().deepCopy(fields()[7].schema(), other.submissionTestcases);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing SubmissionSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(com.codebox.shared_dtos.schema.SubmissionSchema other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.language)) {
        this.language = data().deepCopy(fields()[2].schema(), other.language);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.problemId)) {
        this.problemId = data().deepCopy(fields()[3].schema(), other.problemId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.userId)) {
        this.userId = data().deepCopy(fields()[4].schema(), other.userId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.contestId)) {
        this.contestId = data().deepCopy(fields()[5].schema(), other.contestId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.submissionTestcases)) {
        this.submissionTestcases = data().deepCopy(fields()[7].schema(), other.submissionTestcases);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.code = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder clearCode() {
      code = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'language' field.
      * @return The value.
      */
    public java.lang.CharSequence getLanguage() {
      return language;
    }


    /**
      * Sets the value of the 'language' field.
      * @param value The value of 'language'.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder setLanguage(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.language = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'language' field has been set.
      * @return True if the 'language' field has been set, false otherwise.
      */
    public boolean hasLanguage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'language' field.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder clearLanguage() {
      language = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'problemId' field.
      * @return The value.
      */
    public long getProblemId() {
      return problemId;
    }


    /**
      * Sets the value of the 'problemId' field.
      * @param value The value of 'problemId'.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder setProblemId(long value) {
      validate(fields()[3], value);
      this.problemId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'problemId' field has been set.
      * @return True if the 'problemId' field has been set, false otherwise.
      */
    public boolean hasProblemId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'problemId' field.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder clearProblemId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public long getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder setUserId(long value) {
      validate(fields()[4], value);
      this.userId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder clearUserId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'contestId' field.
      * @return The value.
      */
    public java.lang.Long getContestId() {
      return contestId;
    }


    /**
      * Sets the value of the 'contestId' field.
      * @param value The value of 'contestId'.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder setContestId(java.lang.Long value) {
      validate(fields()[5], value);
      this.contestId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'contestId' field has been set.
      * @return True if the 'contestId' field has been set, false otherwise.
      */
    public boolean hasContestId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'contestId' field.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder clearContestId() {
      contestId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.status = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder clearStatus() {
      status = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'submissionTestcases' field.
      * @return The value.
      */
    public java.util.List<com.codebox.shared_dtos.schema.SubmissionTestcase> getSubmissionTestcases() {
      return submissionTestcases;
    }


    /**
      * Sets the value of the 'submissionTestcases' field.
      * @param value The value of 'submissionTestcases'.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder setSubmissionTestcases(java.util.List<com.codebox.shared_dtos.schema.SubmissionTestcase> value) {
      validate(fields()[7], value);
      this.submissionTestcases = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'submissionTestcases' field has been set.
      * @return True if the 'submissionTestcases' field has been set, false otherwise.
      */
    public boolean hasSubmissionTestcases() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'submissionTestcases' field.
      * @return This builder.
      */
    public com.codebox.shared_dtos.schema.SubmissionSchema.Builder clearSubmissionTestcases() {
      submissionTestcases = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SubmissionSchema build() {
      try {
        SubmissionSchema record = new SubmissionSchema();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.code = fieldSetFlags()[1] ? this.code : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.language = fieldSetFlags()[2] ? this.language : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.problemId = fieldSetFlags()[3] ? this.problemId : (java.lang.Long) defaultValue(fields()[3]);
        record.userId = fieldSetFlags()[4] ? this.userId : (java.lang.Long) defaultValue(fields()[4]);
        record.contestId = fieldSetFlags()[5] ? this.contestId : (java.lang.Long) defaultValue(fields()[5]);
        record.status = fieldSetFlags()[6] ? this.status : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.submissionTestcases = fieldSetFlags()[7] ? this.submissionTestcases : (java.util.List<com.codebox.shared_dtos.schema.SubmissionTestcase>) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SubmissionSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<SubmissionSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SubmissionSchema>
    READER$ = (org.apache.avro.io.DatumReader<SubmissionSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.code);

    out.writeString(this.language);

    out.writeLong(this.problemId);

    out.writeLong(this.userId);

    if (this.contestId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.contestId);
    }

    if (this.status == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.status);
    }

    if (this.submissionTestcases == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.submissionTestcases.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.codebox.shared_dtos.schema.SubmissionTestcase e0: this.submissionTestcases) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);

      this.language = in.readString(this.language instanceof Utf8 ? (Utf8)this.language : null);

      this.problemId = in.readLong();

      this.userId = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.contestId = null;
      } else {
        this.contestId = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.status = null;
      } else {
        this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.submissionTestcases = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.codebox.shared_dtos.schema.SubmissionTestcase> a0 = this.submissionTestcases;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.codebox.shared_dtos.schema.SubmissionTestcase>((int)size0, SCHEMA$.getField("submissionTestcases").schema().getTypes().get(1));
          this.submissionTestcases = a0;
        } else a0.clear();
        SpecificData.Array<com.codebox.shared_dtos.schema.SubmissionTestcase> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.codebox.shared_dtos.schema.SubmissionTestcase>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.codebox.shared_dtos.schema.SubmissionTestcase e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new com.codebox.shared_dtos.schema.SubmissionTestcase();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);
          break;

        case 2:
          this.language = in.readString(this.language instanceof Utf8 ? (Utf8)this.language : null);
          break;

        case 3:
          this.problemId = in.readLong();
          break;

        case 4:
          this.userId = in.readLong();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.contestId = null;
          } else {
            this.contestId = in.readLong();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.status = null;
          } else {
            this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.submissionTestcases = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.codebox.shared_dtos.schema.SubmissionTestcase> a0 = this.submissionTestcases;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.codebox.shared_dtos.schema.SubmissionTestcase>((int)size0, SCHEMA$.getField("submissionTestcases").schema().getTypes().get(1));
              this.submissionTestcases = a0;
            } else a0.clear();
            SpecificData.Array<com.codebox.shared_dtos.schema.SubmissionTestcase> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.codebox.shared_dtos.schema.SubmissionTestcase>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.codebox.shared_dtos.schema.SubmissionTestcase e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new com.codebox.shared_dtos.schema.SubmissionTestcase();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










